<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddPoint" xml:space="preserve">
    <value>添加点</value>
  </data>
  <data name="BasicChartTypesDescription" xml:space="preserve">
    <value>显示了基本的图表类型和堆叠选项。</value>
  </data>
  <data name="BasicChartTypesTitle" xml:space="preserve">
    <value>基本图表类型</value>
  </data>
  <data name="BubbleChartDescription" xml:space="preserve">
    <value>显示气泡图。</value>
  </data>
  <data name="BubbleChartTitle" xml:space="preserve">
    <value>气泡图</value>
  </data>
  <data name="ConditionalFormattingDescription" xml:space="preserve">
    <value>展示通过条件自定义图表元素</value>
  </data>
  <data name="ConditionalFormattingTitle" xml:space="preserve">
    <value>条件格式化</value>
  </data>
  <data name="CustomizingAxesDescription" xml:space="preserve">
    <value>显示自定义轴样式和标签格式。</value>
  </data>
  <data name="CustomizingAxesTitle" xml:space="preserve">
    <value>定制轴</value>
  </data>
  <data name="CustomPlotElementsDescription" xml:space="preserve">
    <value>展示如何完整地定制绘图元素。</value>
  </data>
  <data name="CustomPlotElementsTitle" xml:space="preserve">
    <value>定制绘图元素。</value>
  </data>
  <data name="CustomTooltipsDescription" xml:space="preserve">
    <value>显示自定义的工具提示信息。</value>
  </data>
  <data name="CustomTooltipsTitle" xml:space="preserve">
    <value>自定义工具提示信息</value>
  </data>
  <data name="DataLabelsDescription" xml:space="preserve">
    <value>展示一个简单的具有静态数据标签的图表。</value>
  </data>
  <data name="DataLabelsTitle" xml:space="preserve">
    <value>数据标签</value>
  </data>
  <data name="DynamicChartDescription" xml:space="preserve">
    <value>显示实时的动态图表。</value>
  </data>
  <data name="DynamicChartTitle" xml:space="preserve">
    <value>动态图表</value>
  </data>
  <data name="ExportImageDescription" xml:space="preserve">
    <value>展示如何导出FlexChart图片。</value>
  </data>
  <data name="ExportImageTitle" xml:space="preserve">
    <value>导出图片</value>
  </data>
  <data name="FinancialChartDescription" xml:space="preserve">
    <value>显示k线图股票数据。</value>
  </data>
  <data name="FinancialChartTitle" xml:space="preserve">
    <value>金融图表</value>
  </data>
  <data name="GettingStartedDescription" xml:space="preserve">
    <value>显示了具有工具提示信息的简单图表。</value>
  </data>
  <data name="GettingStartedTitle" xml:space="preserve">
    <value>开始使用</value>
  </data>
  <data name="HitTestDescription" xml:space="preserve">
    <value>演示了FlexChart的hitTest方法的用法。</value>
  </data>
  <data name="HitTestTitle" xml:space="preserve">
    <value>命中测试</value>
  </data>
  <data name="LegendSampleDescription" xml:space="preserve">
    <value>显示了基本图表的标题和轴标题。</value>
  </data>
  <data name="LegendSampleTitle" xml:space="preserve">
    <value>图例和标题</value>
  </data>
  <data name="LoadAnimationDescription" xml:space="preserve">
    <value>显示加载数据时的动画模式。</value>
  </data>
  <data name="LoadAnimationTitle" xml:space="preserve">
    <value>加载动画模式</value>
  </data>
  <data name="MixedChartTypesDescription" xml:space="preserve">
    <value>显示了一个复合图表。</value>
  </data>
  <data name="MixedChartTypesTitle" xml:space="preserve">
    <value>混合图表类型</value>
  </data>
  <data name="MultipleAxesDescription" xml:space="preserve">
    <value>显示多Y轴图表。</value>
  </data>
  <data name="MultipleAxesTitle" xml:space="preserve">
    <value>多个轴</value>
  </data>
  <data name="RemovePoint" xml:space="preserve">
    <value>删除点</value>
  </data>
  <data name="ScrollingDescription" xml:space="preserve">
    <value>显示了一个沿着轴平移或滚动的图表,。</value>
  </data>
  <data name="ScrollingTitle" xml:space="preserve">
    <value>滚动</value>
  </data>
  <data name="ScrollZoomInstructions" xml:space="preserve">
    <value>拖拽滚动或捏合手势放大</value>
  </data>
  <data name="SelectionModesDescription" xml:space="preserve">
    <value>显示不同的选择模式。</value>
  </data>
  <data name="SelectionModesTitle" xml:space="preserve">
    <value>选择模式</value>
  </data>
  <data name="StylingSeriesDescription" xml:space="preserve">
    <value>显示自定义的系列样式。</value>
  </data>
  <data name="StylingSeriesTitle" xml:space="preserve">
    <value>样式化系列</value>
  </data>
  <data name="ThemingDescription" xml:space="preserve">
    <value>显示内置的调色板。</value>
  </data>
  <data name="ThemingTitle" xml:space="preserve">
    <value>样式</value>
  </data>
  <data name="ToggleSeriesDescription" xml:space="preserve">
    <value>显示切换系列可见性的功能。</value>
  </data>
  <data name="ToggleSeriesTitle" xml:space="preserve">
    <value>切换系列</value>
  </data>
  <data name="UpdateAnimationDescription" xml:space="preserve">
    <value>显示数据更新时的动画。</value>
  </data>
  <data name="UpdateAnimationTitle" xml:space="preserve">
    <value>更新动画</value>
  </data>
  <data name="ZoomingScrollingDescription" xml:space="preserve">
    <value>展示通过捏合手势进行缩放。</value>
  </data>
  <data name="ZoomingScrollingTitle" xml:space="preserve">
    <value>缩放和滚动</value>
  </data>
  <data name="LineMarkerDescription" xml:space="preserve">
    <value>在图表上方显示一个可移动的标识。</value>
  </data>
  <data name="LineMarkerTitle" xml:space="preserve">
    <value>行标识</value>
  </data>
  <data name="ImageSavedDescription" xml:space="preserve">
    <value>照片已经保存在您的设备的相册中。</value>
    <comment>The image has been saved to your device's picture album.</comment>
  </data>
  <data name="ImageSavedTitle" xml:space="preserve">
    <value>照片保存</value>
    <comment>Image Saved</comment>
  </data>
  <data name="OKTitle" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="AnnotationDescription" xml:space="preserve">
    <value>如何在FlexChart中显示注释。</value>
    <comment>Shows how to display annotations on FlexChart.</comment>
  </data>
  <data name="AnnotationTitle" xml:space="preserve">
    <value>注释</value>
    <comment>Annotations</comment>
  </data>
  <data name="TakeSnapshot" xml:space="preserve">
    <value>拍摄快照</value>
  </data>
  <data name="PieBasicFeaturesDescription" xml:space="preserve">
    <value>显示内半径、偏移量和起始角度。</value>
  </data>
  <data name="PieBasicFeaturesTitle" xml:space="preserve">
    <value>基本功能</value>
  </data>
  <data name="PieDataLabelsDescription" xml:space="preserve">
    <value>显示静态的数据标签。</value>
  </data>
  <data name="PieDataLabelsTitle" xml:space="preserve">
    <value>数据标签</value>
  </data>
  <data name="PieGettingStartedDescription" xml:space="preserve">
    <value>显示一个简单的具有工具提示信息的饼图。</value>
  </data>
  <data name="PieGettingStartedTitle" xml:space="preserve">
    <value>开始使用</value>
  </data>
  <data name="PieLegendSampleDescription" xml:space="preserve">
    <value>显示了基本的页眉、页脚和图例定位。</value>
  </data>
  <data name="PieLegendSampleTitle" xml:space="preserve">
    <value>图例和标题</value>
  </data>
  <data name="PieSelectionDescription" xml:space="preserve">
    <value>显示选择动画、偏移量和位置。</value>
  </data>
  <data name="PieSelectionTitle" xml:space="preserve">
    <value>选择</value>
  </data>
  <data name="PieThemingDescription" xml:space="preserve">
    <value>显示可用的调色板。</value>
  </data>
  <data name="PieThemingTitle" xml:space="preserve">
    <value>主题</value>
  </data>
  <data name="AnnotationLocalization" xml:space="preserve">
    <value>AnnotationLocalization</value>
  </data>
  <data name="CustomPlotElementsScrollingDescription" xml:space="preserve">
    <value>定制绘图元素的滑动。</value>
  </data>
  <data name="CustomPlotElementsScrollingTitle" xml:space="preserve">
    <value>滑动定制绘图元素</value>
  </data>
  <data name="TreeMapDescription" xml:space="preserve">
    <value>展示树形图的主要功能。</value>
  </data>
  <data name="TreeMapTitle" xml:space="preserve">
    <value>树形图</value>
  </data>
</root>